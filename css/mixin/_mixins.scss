/* Mixins */

@mixin text-shadow ($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
	text-shadow: $string;
}
@mixin box-shadow ($string) {
	-webkit-box-shadow: $string;
	-moz-box-shadow:    $string;
	box-shadow:$string;
}
@mixin drop-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
	-webkit-box-shadow:	$x $y $blur $spread rgba(0, 0, 0, $alpha);
	-moz-box-shadow:	$x $y $blur $spread rgba(0, 0, 0, $alpha);
	box-shadow:		$x $y $blur $spread rgba(0, 0, 0, $alpha);
}
@mixin inner-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
	-webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
	-moz-box-shadow:    inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
	box-shadow:         inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin  box-sizing ($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	box-sizing:         $type;
}

@mixin border-radius ($radius: 5px) {
	-webkit-border-radius: $radius;
	-moz-border-radius:    $radius;
	border-radius:         $radius;

	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}
@mixin  border-radiuses ($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	-webkit-border-top-right-radius:    $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius:  $bottomleft;
	-webkit-border-top-left-radius:     $topleft;

	-moz-border-radius-topright:        $topright;
	-moz-border-radius-bottomright:     $bottomright;
	-moz-border-radius-bottomleft:      $bottomleft;
	-moz-border-radius-topleft:         $topleft;

	border-top-right-radius:            $topright;
	border-bottom-right-radius:         $bottomright;
	border-bottom-left-radius:          $bottomleft;
	border-top-left-radius:             $topleft;

	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}

@mixin gradient ($startColor: #eee, $endColor: white) {
	background-color: $startColor;
	background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
	background: -webkit-linear-gradient(top, $startColor, $endColor);
	background: -moz-linear-gradient(top, $startColor, $endColor);
	background: -ms-linear-gradient(top, $startColor, $endColor);
	background: -o-linear-gradient(top, $startColor, $endColor);
}
@mixin horizontal-gradient ($startColor: #eee, $endColor: white) {
	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(left, $startColor, $endColor);
	background-image: -moz-linear-gradient(left, $startColor, $endColor);
	background-image: -ms-linear-gradient(left, $startColor, $endColor);
	background-image: -o-linear-gradient(left, $startColor, $endColor);
}

@mixin animation ($name, $duration: 300ms, $delay: 0, $ease: ease) {
	-webkit-animation: $name $duration $delay $ease;
	-moz-animation:    $name $duration $delay $ease;
	-ms-animation:     $name $duration $delay $ease;
}
/*transition: property duration timing-function delay|initial|inherit;*/
@mixin transition ($type:all, $duration:300ms, $ease:ease, $delay:0ms) {
	-webkit-transition: $type $duration $ease $delay;
	-moz-transition:    $type $duration $ease $delay;
	-ms-transition:     $type $duration $ease $delay;
	-o-transition:      $type $duration $ease $delay;
	transition: $type $duration $ease $delay;
}
@mixin transitionCleanup(){
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
	-webkit-transform: translateZ(0);
	-ms-transform: translateZ(0);
	transform: translateZ(0);
}
@mixin transform($string){
	-webkit-transform:$string;
	-moz-transform: 	 $string;
	-ms-transform: 		 $string;
	-o-transform: 		 $string;
}
@mixin scale ($factor) {
	-webkit-transform: scale($factor);
	-moz-transform: 	 scale($factor);
	-ms-transform: 		 scale($factor);
	-o-transform: 		 scale($factor);
}
@mixin rotate ($deg) {
	-webkit-transform: rotate($deg);
	-moz-transform: 	 rotate($deg);
	-ms-transform: 		 rotate($deg);
	-o-transform: 		 rotate($deg);
}
@mixin skew ($deg, $deg2) {
	-webkit-transform:       skew($deg, $deg2);
	-moz-transform: 	 skew($deg, $deg2);
	-ms-transform: 		 skew($deg, $deg2);
	-o-transform: 		 skew($deg, $deg2);
}
@mixin translate ($x, $y:0) {
	-webkit-transform:       translate($x, $y);
	-moz-transform: 	 translate($x, $y);
	-ms-transform: 		 translate($x, $y);
	-o-transform: 		 translate($x, $y);
}
@mixin translate3d ($x, $y: 0, $z: 0) {
	-webkit-transform:       translate3d($x, $y, $z);
	-moz-transform: 	 translate3d($x, $y, $z);
	-ms-transform: 		 translate3d($x, $y, $z);
	-o-transform: 		 translate3d($x, $y, $z);
}
@mixin perspective ($value: 1000) {
	-webkit-perspective: 	$value;
	-moz-perspective: 	$value;
	-ms-perspective: 	$value;
	perspective: 		$value;
}
@mixin transform-origin ($x:center, $y:center) {
	-webkit-transform-origin: $x $y;
	-moz-transform-origin:    $x $y;
	-ms-transform-origin:     $x $y;
	-o-transform-origin:      $x $y;
}

@mixin user-select-none(){
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin cover-background($img-uri,$height:500,$background-cover:cover,$background-top:center, $background-left:center,$position:relative) {
  background: url($img-uri) no-repeat;
  -webkit-background-size: $background-cover;
  -moz-background-size: $background-cover;
  -o-background-size: $background-cover;
  background-size: $background-cover;
  position: $position;
  height: $height+px;
}

@mixin button($bg-color:#339eca,$br-radius:4){
  cursor: pointer;
  background:$bg-color;
  border-radius: $br-radius+px;
  @include user-select-none();
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin img-inline{
  width: auto;
  display: inline;
}

@mixin img-center-responsive{
  width: auto;
  display: block;
  margin: auto;
  max-width: 100%;
  height: auto;
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin vertical-align($box-height:50%,$margin:auto){
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: $box-height;
  margin: $margin;
}

@mixin font-size($sizeValue: 16,$preference: null) {
  @if($preference == null){
  font-size: $sizeValue + px;
  font-size: ($sizeValue/10) + rem;
  }
  @else {
  font-size: $sizeValue + px!important;
  font-size: ($sizeValue/10) + rem!important;
  }
}
@mixin line-height($sizeValue: 16) {
  line-height: $sizeValue + px;
  line-height: ($sizeValue/10) + rem;
}
@mixin input-placeholder($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &::-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

@mixin border-line($type:all,$height:1,$style:solid,$color:$blue-medium,$padding-left:0,$padding-top:0,$padding-right:0,$padding-bottom:0,$margin-top:0,$margin-right:0,$margin-bottom:0,$margin-left:0){
  @if $type == top {
    border-top: $height+px $style $color;
  }
  @else if $type == right {
    border-right: $height+px $style $color;
  }
  @else if $type == bottom {
    border-bottom: $height+px $style $color;
  }
  @else if $type == left {
    border-left: $height+px $style $color;
  }
  @else{
    border: $height+px $style $color;
  }
  padding: $padding-top $padding-right $padding-bottom $padding-left;
  margin: $margin-top $margin-right $margin-bottom $margin-left;
}
@mixin media-query($constraint, $viewport1, $viewport2: null) {
  @if $constraint == min {
    @media all and (min-width: $viewport1+px) {
      @content;
    }
  } @else if $constraint == max {
    @media all and (max-width: $viewport1+px) {
      @content;
    }
  } @else {
    @media all and (min-width: $viewport1+px) and (max-width: $viewport2+px) {
      @content;
    }
  }
}

@mixin flip-box(){
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
    -webkit-align-items: flex-start;
    align-items: flex-start;
}
@mixin flip-box-first(){
    -webkit-box-ordinal-group: 2;
    -moz-box-ordinal-group: 2;
    -ms-flex-order: 2;
    -webkit-order: 2;
    order: 2;
}
@mixin flip-box-second(){
    -webkit-box-ordinal-group: 1;
    -moz-box-ordinal-group: 1;
    -ms-flex-order: 1;
    -webkit-order: 1;
    order: 1;
}
/* Mixins */
/*My Special Mixins */
@mixin clear-fix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
$grid-columns:              12;
$grid-gutter-width:         30px;
$grid-float-breakpoint:     768px;
$screen-sm-min:             767px;
$screen-md-min:             991px;
/* Create own personal Row */
@mixin cnv-row($gutter: $grid-gutter-width) {
  // Then clear the floated columns
  @include clear-fix();
  @media (min-width: $screen-sm-min) {
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
  }
  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
  }
}
/* Create own personal medium Col */
// Generate the medium columns
@mixin cnv-md-col($columns,$gutter:$grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}